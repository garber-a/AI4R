-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE movies(
    id int,
    name varchar(50),
    score int
);

CREATE TABLE cast(
    movie_id int,
    cast_id int,
    cast_name varchar(50)
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.mode csv
.import movie-name-score.txt movies
.import movie-cast.txt cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX scores_index on movies(score);
CREATE INDEX cast_index on cast(cast_id);
CREATE INDEX movie_index on movies(id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]
SELECT
    AVG(score) as average_score
FROM movies
WHERE
    score >= 5
;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

SELECT
    id,
    name,
    score
FROM movies
ORDER BY 
    id ASC,
    name ASC
LIMIT 5
;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]

SELECT 
    cast_id,
    cast_name,
    COUNT(*) AS movie_count 
FROM cast 
GROUP BY 
    cast_id,
    cast_name
HAVING COUNT(*) = 2
ORDER BY
    cast_name ASC
LIMIT 10
;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT
    c.cast_id,
    c.cast_name,
    AVG(m.score) AS average_score
FROM movies m
JOIN cast c
    ON m.id = c.movie_id
JOIN (
    SELECT 
        cast_id,
        count(*) as tally
    FROM cast
    GROUP BY   
        cast_id
    HAVING count(*) > 2
) few
    on c.cast_id = few.cast_id
WHERE
    m.score >= 40
GROUP BY
    c.cast_id,
    c.cast_name
ORDER BY
     AVG(m.score) DESC,
     c.cast_name ASC
LIMIT 10
;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS
SELECT 
    cast_member_id1,
    cast_member_id2,
    count(*) as movie_count,
    avg(movie_score) as average_movie_score
FROM
    (
        SELECT
            DISTINCT
            c1.cast_id as cast_member_id1,
            c2.cast_id as cast_member_id2,
            m.id as movie_id,
            m.score as movie_score
        FROM cast c1
        JOIN movies m
            ON c1.movie_id = m.id
        JOIN cast c2
            ON m.id = c2.movie_id
            AND c1.cast_id <> c2.cast_id
            AND c1.cast_id < c2.cast_id
    ) a
GROUP BY
    cast_member_id1,
    cast_member_id2
HAVING COUNT(*) >= 3
    AND avg(movie_score) >= 50
;




-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT
    a.cast_member as cast_id,
    c.cast_name,
    AVG(average_movie_score) as collaboration_score
FROM (
        SELECT 
            cast_member_id1 as cast_member,
            average_movie_score
        FROM good_collaboration

        UNION ALL

        SELECT
            cast_member_id2 as cast_member,
            average_movie_score
        FROM good_collaboration
    ) a
JOIN (
        SELECT DISTINCT
            cast_id,
            cast_name
        FROM cast 
    ) c
    ON a.cast_member = c.cast_id
GROUP BY
    a.cast_member,
    c.cast_name
ORDER BY    
    AVG(average_movie_score) DESC,
    c.cast_name ASC
LIMIT 5
;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING fts4(id int, name text, year int, overview text, popularity decimal);
.import movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT
    count(*) as count_overview
FROM movie_overview 
WHERE overview MATCH 'fight'
;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]


SELECT
    id
FROM movie_overview
WHERE overview MATCH 'love NEAR/5 story'
;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --